#define TA			// This is a TA script

static-var  Stunned;
static-var  statechg_DesiredState, statechg_StateChanging;

#include "sfxtype.h"
#include "exptype.h"

//piece base, strut, dishA, dishA1, dishA2, dishA3, dishB, dishB1, dishB2, dishB3, blink;
piece base, strutA, strutB, dishA, dishB, dishC, jammerBlink;


#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

Go()
{

    spin strutA around y-axis speed <20> accelerate <1>;
    spin strutB around y-axis speed <-40> accelerate <2>;
    spin dishA around y-axis speed <40> accelerate <1>;
    spin dishB around y-axis speed <-70> accelerate <2>;
    spin dishC around y-axis speed <170> accelerate <4>;

	return (0);
}

Stop()
{
	stop-spin dishA around y-axis decelerate <10>;
	stop-spin dishB around y-axis decelerate <10>;
	stop-spin dishC around y-axis decelerate <10>;
    stop-spin strutA around y-axis decelerate <10>;
	stop-spin strutB around y-axis decelerate <10>;
	return (0);
}


SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    call-script Stop();
	} else {
	    call-script Go();
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
    
	hide jammerBlink;

		while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}

	call-script InitState();


	return (0);
}

/**Lights()
{
	while( TRUE )
	{
	    if (!Stunned) {
		    emit-sfx 1024 + 0 from radarBlink;
		}
		sleep 2500;
	}
	sleep 50;
	start-script Lights();
}**/

Activate()
{
	call-script Go();
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	call-script Stop();
	start-script RequestState(1);
	return (0);
}



SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode strutA type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode strutA type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode strutA type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode strutA type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
        explode strutB type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dishA type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dishB type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
        explode dishC type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
