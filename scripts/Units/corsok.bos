#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wake, aimy1, aimy2, turret, dclauncher, aimx1, sleeve, barrel1, barrel2, flare1, flare2, flaredc,
       strutl, jetl, bladesl, strutr, jetr, bladesr;

static-var  Static_Var_1, bAiming, gun_1, oldheading;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8
#define SIG_IDLE			16



#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 10
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

HoverIdle()
{
	signal SIG_IDLE;
	set-signal-mask SIG_IDLE;
	while( TRUE )
	{
	    emit-sfx 1024 + 2 from wake;
	    sleep 1800;
	}
}

Steering(heading, steery, currentSpeed)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while(1)
	{
		heading = get HEADING;
		steery = (heading - oldheading)*5;
		turn jetl to z-axis 0 - steery speed <120>;
		turn jetr to z-axis 0 - steery speed <120>;
		currentSpeed = <10> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <100>) currentSpeed = <100>;
		spin bladesl around y-axis speed currentSpeed;
		spin bladesr around y-axis speed 0 - currentSpeed;
		sleep 66;
		oldheading = heading;
	}
}

StartMoving()
{
	turn strutl to x-axis <60> speed <60>;
	turn strutr to x-axis <60> speed <60>;
	
    start-script Steering();
	
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	signal SIG_IDLE;
	var waketime;
	var bowtime;
	while( TRUE )
	{
		emit-sfx 1024 + 0 from wake;
		if (bowtime) emit-sfx 1024 + 1 from wake;
		bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 30 ) waketime = 30;
		sleep 15000 / waketime;
	}
}

StopMoving()
{
	turn strutl to x-axis <0> speed <30>;
	turn strutr to x-axis <0> speed <30>;
	
	signal SIG_MOVE;
	signal SIG_IDLE;
	start-script HoverIdle();
	return (0);
}

Create()
{
	hide wake;
	gun_1 = 0;
	oldheading = get HEADING;
	//cache base; //What the fuck is cache?!?!
	//cache turret;
	bAiming = FALSE;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn aimy1 to y-axis <0.00000> speed <75.00000>;
	turn aimx1 to x-axis <0.00000> speed <50.00000>;
	//cache barrel1;
	//cache aimy1;
	bAiming = FALSE;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 8000;
	start-script ExecuteRestoreAfterDelay();
}

QueryPrimary(piecenum)
{
    if (gun_1==0)
    {
        piecenum = flare1;
    }
    else 
    {
        piecenum = flare2;
    }
}

AimFromPrimary(piecenum)
{
	piecenum = aimx1;
	return (0);
}

FirePrimary()
{	
	if (gun_1 == 0)
	{	
		move barrel1 to z-axis [-10] speed [1250];
		sleep 50;
		move barrel1 to z-axis [0] speed [10];
		sleep 1000;
		gun_1=1;
	}
	else
	{
		move barrel2 to z-axis [-10] speed [1250];
		sleep 50;
		move barrel2 to z-axis [0] speed [10];
		sleep 1000;
		gun_1=0;
	}
	sleep 100;
	return(0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	
	//dont-cache aimy1;
	//dont-cache aimx1;
	//dont-cache barrel1;
	
	turn aimy1 to y-axis heading speed <120.00000>;
	turn aimx1 to x-axis <0.00000> - pitch speed <80.00000>;
	
	wait-for-turn aimy1 around y-axis;
	wait-for-turn aimx1 around x-axis;
	
	start-script RestoreAfterDelay();
	return (1);
}

QuerySecondary(piecenum)
{
	piecenum = flaredc;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = aimy2;
	return (0);
}

FireSecondary()
{	
	return (0);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	start-script RestoreAfterDelay();
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( Static_Var_1 >= 4 )
	{
		if( severity <= 25 )
		{
			corpsetype = 1;
			explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
			return (corpsetype);
		}
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | BITMAP1 | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		//explode rlauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		//explode llauncher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
	explode sleeve type FIRE | SMOKE | FALL | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	explode turret type FIRE | SMOKE | FALL | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	return (corpsetype);
}
